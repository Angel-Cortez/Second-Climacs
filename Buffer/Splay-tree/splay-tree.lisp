(cl:in-package #:splay-tree)

;;;; Abbreviations:   n = node
;;;;                  p = parent
;;;;                 gp = grandparent
;;;;                ggp = great grandparent

(defgeneric left (node))
(defgeneric right (node))
(defgeneric (setf left) (new-left node))
(defgeneric (setf right) (new-right node))

(defclass node ()
  ((%parent :initform nil
	    :initarg :parent
	    :reader parent
	    :writer set-parent)
   (%left :initform nil :accessor left)
   (%right :initform nil :accessor right)))

(defmethod (setf left) :before ((new-left node) (node node))
  (assert (null (parent new-left)))
  (assert (null (left node)))
  (set-parent node new-left))

(defmethod (setf left) :before ((new-left null) (node node))
  (unless (null (left node))
    (set-parent nil (left node))))

(defmethod (setf right) :before ((new-right node) (node node))
  (assert (null (parent new-right)))
  (assert (null (right node)))
  (set-parent node new-right))

(defmethod (setf right) :before ((new-right null) (node node))
  (unless (null (right node))
    (set-parent nil (right node))))

(defgeneric splay (n))
(defgeneric splay-2 (n p))
(defgeneric splay-3 (n p gp))
(defgeneric splay-4 (n p gp ggp))

(defmethod splay ((n node))
  (splay-2 n (parent n))
  n)

(defmethod splay-2 ((n node) (p null))
  nil)

(defmethod splay-2 ((n node) (p node))
  (splay-3 n p (parent p)))

(defmethod splay-3 ((n node) (p node) (gp null))
  (if (eq n (left p))
      (let ((rn (right n)))
	(setf (left p) nil)
	(setf (right n) nil)
	(setf (left p) rn)
	(setf (right n) p))
      (let ((ln (left n)))
	(setf (right p) nil)
	(setf (left n) nil)
	(setf (right p) ln)
	(setf (left n) p)))
  n)

(defmethod splay-3 ((n node) (p node) (gp node))
  (splay-4 n p gp (parent gp)))

(defmethod splay-4 ((n node) (p node) (gp node) (ggp null))
  (if (eq n (left p))
      (if (eq p (left gp))
	  (let ((rn (right n))
		(rp (right p)))
	    (setf (left gp) nil)
	    (setf (right p) nil)
	    (setf (left p) nil)
	    (setf (right n) nil)
	    (setf (left gp) rp)
	    (setf (left p) rn)
	    (setf (right p) gp)
	    (setf (right n) p))
	  (let ((ln (left n))
		(rn (right n)))
	    (setf (right gp) nil)
	    (setf (left p) nil)
	    (setf (left n) nil)
	    (setf (right n) nil)
	    (setf (right gp) ln)
	    (setf (left p) rn)
	    (setf (left n) gp)
	    (setf (right n) p)))
      (if (eq p (left gp))
	  (let ((ln (left n))
		(rn (right n)))
	    (setf (left gp) nil)
	    (setf (right p) nil)
	    (setf (left n) nil)
	    (setf (right n) nil)
	    (setf (left gp) rn)
	    (setf (right p) ln)
	    (setf (left n) p)
	    (setf (right n) gp))
	  (let ((ln (left n))
		(lp (left p)))
	    (setf (right gp) nil)
	    (setf (left p) nil)
	    (setf (right p) nil)
	    (setf (left n) nil)
	    (setf (right gp) lp)
	    (setf (right p) ln)
	    (setf (left p) gp)
	    (setf (left n) p))))
  n)
	    

(defmethod splay-4 ((n node) (p node) (gp node) (ggp node))
  (if (eq gp (left ggp))
      (progn (setf (left ggp) nil)
	     (splay-4 n p gp nil)
	     (setf (left ggp) n))
      (progn (setf (right ggp) nil)
	     (splay-4 n p gp nil)
	     (setf (right ggp) n)))
  (splay n))
      
