(cl:in-package #:climacs-syntax-common-lisp)

(defun read-forms (analyzer)
  (with-accessors ((cache folio)
                   (prefix prefix)
                   (suffix suffix)
                   (residue residue)
                   (current-line-number current-line-number)
                   (current-item-number current-item-number ))
      analyzer
    (with-accessors ((prefix prefix) (suffix suffix) (residue residue))
        cache
      (loop do (skip-whitespace analyzer)
               (if (or (eof-p analyzer)
                       (and (not (null (suffix cache)))
                            (= (current-line-number analyzer)
                               (start-line (first (suffix cache))))
                            (= (current-item-number analyzer)
                               (start-column (first (suffix cache))))))
                   ;; If we reach EOF while reading whitespace, then the
                   ;; residue and the suffix must be empty.  If we do not
                   ;; reach EOF, then we stop only if the current position
                   ;; is that of the first parse result on the suffix.
                   (return-from read-forms nil)
                   (let ((next (parse analyzer)))
                     (loop until (or (null (residue cache))
                                     (> (start-line (first (residue cache)))
                                        (current-line-number analyzer))
                                     (and (= (start-line (first (residue cache)))
                                             (current-line-number analyzer))
                                          (> (start-column (first (residue cache)))
                                             (current-item-number analyzer))))
                           do (pop (residue cache)))
                     (when (null (residue cache))
                       (loop until (or (null (suffix cache))
                                       (> (start-line (first (suffix cache)))
                                          (current-line-number analyzer))
                                       (and (= (start-line (first (suffix cache)))
                                               (current-line-number analyzer))
                                            (> (start-column (first (suffix cache)))
                                               (current-item-number analyzer))))
                             do (pop-from-suffix cache)))
                     (push next (prefix cache))))))))
