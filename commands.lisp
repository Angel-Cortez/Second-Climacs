(defpackage #:climacs-commands
  (:use #:common-lisp))

(in-package #:climacs-commands)

(defclass emacs-style-command-processor ()
  ((%mappings :initarg :mappings :accessor mappings)
   (%numeric-argument :initform nil :accessor numeric-argument)
   (%keystrokes-so-far :initform '() :accessor keystrokes-so-far)
   (%state :initform :start :accessor state)))

(defgeneric submit-keystroke (key-processor keystroke))

(defun prefix-p (partial-sentence sentence)
  (and (<= (length partial-sentence) (length sentence))
       (every #'equal partial-sentence sentence)))

(defun form-action (template numeric-argument)
  (if (eq (car (last template)) :opt-num)
      (if (null numeric-argument)
	  (butlast template)
	  (append (butlast template) (list numeric-argument)))
      (substitute numeric-argument :num template)))

(defmethod submit-keystroke
    ((key-processor emacs-style-command-processor) keystroke)
  (with-accessors ((mappings mappings)
		   (numeric-argument numeric-argument)
		   (keystrokes-so-far keystrokes-so-far)
		   (state state))
      key-processor
    (cond ((equal keystroke '(#\g :control))
	   (setf numeric-argument nil)
	   (setf keystrokes-so-far '())
	   (setf state :start)
	   (throw :accept '(clim3:abort)))
	  ((and (eq state :start)
		(equal keystroke '(#\u :control)))
	   (setf numeric-argument 4)
	   (setf state :numeric-argument-prefix))
	  ((and (eq state :numeric-argument-prefix)
		(equal keystroke '(#\u :control)))
	   (setf numeric-argument (* numeric-argument 4)))
	  ((and (eq state :numeric-argument-prefix)
		(member keystroke
			'((#\0) (#\1) (#\2) (#\3) (#\4)
			  (#\5) (#\6) (#\7) (#\8) (#\9))
			:test #'equal))
	   (setf numeric-argument
		 (- (char-code (car keystroke)) (char-code #\0)))
	   (setf state :numeric-argument-digits))
	  ((and (eq state :numeric-argument-digits)
		(member keystroke
			'((#\0) (#\1) (#\2) (#\3) (#\4)
			  (#\5) (#\6) (#\7) (#\8) (#\9))
			:test #'equal))
	   (setf numeric-argument
		 (+ (* numeric-argument 10)
		    (- (char-code (car keystroke)) (char-code #\0)))))
	  (t
	   (setf state :command)
	   (setf keystrokes-so-far
		 (append keystrokes-so-far (list keystroke)))
	   (let ((entries (remove-if-not
			   (lambda (entry)
			     (prefix-p keystrokes-so-far (car entry)))
			   mappings)))
	     (cond  ((null entries)
		     (let ((temp keystrokes-so-far))
		       (setf numeric-argument nil)
		       (setf keystrokes-so-far nil)
		       (setf state :start)
		       (throw :accept `(no-match ,temp))))
		    ((equal keystrokes-so-far (caar entries))
		     ;; We found a perfect match.
		     (let ((temp numeric-argument))
		       (setf numeric-argument nil)
		       (setf keystrokes-so-far nil)
		       (setf state :start)
		       (throw :accept
			 (form-action (cadar entries) temp))))
		    (t
		     nil)))))))

(defclass climacs-view (clim3:view)
  ((%command-table
    :initarg :command-table
    :accessor command-table)
   (%command-key-processor
    :initform (make-instance 'emacs-style-command-processor)
    :initarg :command-key-processor
    :accessor command-key-processor)
   (%cursor :initarg cursor :reader cursor)
   (%buffer :initarg :buffer :reader buffer)))

(defclass climacs (clim3:application)
  ((%current-view
    :initarg :current-view
    :accessor clim3:current-view)
   (%views :initarg :views :accessor views)))

(defun point ()
  (cursor (current-view clim3:*application*)))

(clim3:define-command forward-item (&optional (count 1))
  (climacs-basic-emacs:forward-item (point) count))

(clim3:define-command backward-item (&optional (count 1))
  (climacs-basic-emacs:backward-item (point) count))

(clim3:define-command insert-character
    ((character character) &optional (count 1))
  (climacs-basic-emacs:insert-item character (point) count))

(clim3:define-command delete-item (&optional (count 1))
  (climacs-basic-emacs:delete-item (point) count))

(clim3:define-command erase-item (&optional (count 1))
  (climacs-basic-emacs:erase-item (point) count))

;;; FIXME: factor the characters to groups.
(defparameter *mappings*
  '((((#\x :control) (#\c :control))
     (quit))
    (((#\f :control))
     (forward-item :opt-num))
    (((#\b :control))
     (backward-item :opt-num))
    (((#\x :control) (#\f :control))
     (find-file))
    (((#\x :control) (#\i))
     (insert-file))
    (((#\Space))
     (insert-char #\Space :opt-num))
    (((#\!))
     (insert-char #\! :opt-num))
    (((#\"))
     (insert-char #\" :opt-num))
    (((#\#))
     (insert-char #\# :opt-num))
    (((#\%))
     (insert-char #\% :opt-num))
    (((#\&))
     (insert-char #\& :opt-num))
    (((#\'))
     (insert-char #\' :opt-num))
    (((#\())
     (insert-char #\( :opt-num))
    (((#\)))
     (insert-char #\) :opt-num))
    (((#\*))
     (insert-char #\* :opt-num))
    (((#\+))
     (insert-char #\+ :opt-num))
    (((#\,))
     (insert-char #\, :opt-num))
    (((#\-))
     (insert-char #\- :opt-num))
    (((#\.))
     (insert-char #\. :opt-num))
    (((#\/))
     (insert-char #\/ :opt-num))
    (((#\0))
     (insert-char #\0 :opt-num))
    (((#\1))
     (insert-char #\1 :opt-num))
    (((#\2))
     (insert-char #\2 :opt-num))
    (((#\3))
     (insert-char #\3 :opt-num))
    (((#\4))
     (insert-char #\4 :opt-num))
    (((#\5))
     (insert-char #\5 :opt-num))
    (((#\6))
     (insert-char #\6 :opt-num))
    (((#\7))
     (insert-char #\7 :opt-num))
    (((#\8))
     (insert-char #\8 :opt-num))
    (((#\9))
     (insert-char #\9 :opt-num))
    (((#\:))
     (insert-char #\: :opt-num))
    (((#\;))
     (insert-char #\; :opt-num))
    (((#\<))
     (insert-char #\< :opt-num))
    (((#\=))
     (insert-char #\= :opt-num))
    (((#\>))
     (insert-char #\> :opt-num))
    (((#\?))
     (insert-char #\? :opt-num))
    (((#\@))
     (insert-char #\@ :opt-num))
    (((#\A))
     (insert-char #\A :opt-num))
    (((#\B))
     (insert-char #\B :opt-num))
    (((#\C))
     (insert-char #\C :opt-num))
    (((#\D))
     (insert-char #\D :opt-num))
    (((#\E))
     (insert-char #\E :opt-num))
    (((#\F))
     (insert-char #\F :opt-num))
    (((#\G))
     (insert-char #\G :opt-num))
    (((#\H))
     (insert-char #\H :opt-num))
    (((#\I))
     (insert-char #\I :opt-num))
    (((#\J))
     (insert-char #\J :opt-num))
    (((#\K))
     (insert-char #\K :opt-num))
    (((#\L))
     (insert-char #\L :opt-num))
    (((#\M))
     (insert-char #\M :opt-num))
    (((#\N))
     (insert-char #\N :opt-num))
    (((#\O))
     (insert-char #\O :opt-num))
    (((#\P))
     (insert-char #\P :opt-num))
    (((#\Q))
     (insert-char #\Q :opt-num))
    (((#\R))
     (insert-char #\R :opt-num))
    (((#\S))
     (insert-char #\S :opt-num))
    (((#\T))
     (insert-char #\T :opt-num))
    (((#\U))
     (insert-char #\U :opt-num))
    (((#\V))
     (insert-char #\V :opt-num))
    (((#\W))
     (insert-char #\W :opt-num))
    (((#\X))
     (insert-char #\X :opt-num))
    (((#\Y))
     (insert-char #\Y :opt-num))
    (((#\Z))
     (insert-char #\Z :opt-num))
    (((#\[))
     (insert-char #\[ :opt-num))
    (((#\\))
     (insert-char #\\ :opt-num))
    (((#\]))
     (insert-char #\] :opt-num))
    (((#\^))
     (insert-char #\^ :opt-num))
    (((#\_))
     (insert-char #\_ :opt-num))
    (((#\`))
     (insert-char #\` :opt-num))
    (((#\a))
     (insert-char #\a :opt-num))
    (((#\b))
     (insert-char #\b :opt-num))
    (((#\c))
     (insert-char #\c :opt-num))
    (((#\d))
     (insert-char #\d :opt-num))
    (((#\e))
     (insert-char #\e :opt-num))
    (((#\f))
     (insert-char #\f :opt-num))
    (((#\g))
     (insert-char #\g :opt-num))
    (((#\h))
     (insert-char #\h :opt-num))
    (((#\i))
     (insert-char #\i :opt-num))
    (((#\j))
     (insert-char #\j :opt-num))
    (((#\k))
     (insert-char #\k :opt-num))
    (((#\l))
     (insert-char #\l :opt-num))
    (((#\m))
     (insert-char #\m :opt-num))
    (((#\n))
     (insert-char #\n :opt-num))
    (((#\o))
     (insert-char #\o :opt-num))
    (((#\p))
     (insert-char #\p :opt-num))
    (((#\q))
     (insert-char #\q :opt-num))
    (((#\r))
     (insert-char #\r :opt-num))
    (((#\s))
     (insert-char #\s :opt-num))
    (((#\t))
     (insert-char #\t :opt-num))
    (((#\u))
     (insert-char #\u :opt-num))
    (((#\v))
     (insert-char #\v :opt-num))
    (((#\w))
     (insert-char #\w :opt-num))
    (((#\x))
     (insert-char #\x :opt-num))
    (((#\y))
     (insert-char #\y :opt-num))
    (((#\z))
     (insert-char #\z :opt-num))
    (((#\{))
     (insert-char #\{ :opt-num))
    (((#\|))
     (insert-char #\| :opt-num))
    (((#\}))
     (insert-char #\} :opt-num))
    (((#\~))
     (insert-char #\~ :opt-num))))
